using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Client
{
    public sealed class SourceCombiner
    {
        private static readonly List<string> SourceFilesToIgnore = new List<string>
        {
            "Core.AssemblyInfo.cs"
        };

        public static void Merge()
        {
            string projectFilePath = @"C:\Users\quent\source\repos\CodingGame.BottersOfTheGalaxy\Core";
            string outputFilePath = @"C:\Users\quent\source\repos\CodingGame.BottersOfTheGalaxy\Build\CompiledClass.cs";

            var filesToParse = GetSourceFileNames(projectFilePath);
            var namespaces = GetUniqueNamespaces(filesToParse);

            string outputSource = GenerateCombinedSource(namespaces, filesToParse);
            File.WriteAllText(outputFilePath, outputSource);
        }

        private static string GenerateCombinedSource(List<string> namespaces, List<string> files)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"/*");
            sb.AppendLine($" * File generated by SourceCombiner.exe using {files.Count} source files.");
            sb.AppendLine($" * Created On: {DateTime.Now}");
            sb.AppendLine(@"*/");

            foreach (var ns in namespaces.OrderBy(s => s))
            {
                sb.AppendLine("using " + ns + ";");
            }

            foreach (var file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);
                sb.AppendLine(@"//*** SourceCombiner -> original file " + Path.GetFileName(file) + " ***");
                var openingTag = "using ";
                foreach (var sourceLine in sourceLines)
                {
                    var trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    var isUsingDir = trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";");
                    if (!string.IsNullOrWhiteSpace(sourceLine) && !isUsingDir)
                    {
                        sb.AppendLine(sourceLine);
                    }
                }
            }

            return sb.ToString();
        }

        private static List<string> GetSourceFileNames(string solutionFilePath)
        {
            return Directory.EnumerateFiles(solutionFilePath, "*.cs", SearchOption.AllDirectories).ToList().Where(x => !SourceFilesToIgnore.Any(y => x.Contains(y))).ToList();
        }


        private static List<string> GetUniqueNamespaces(List<string> files)
        {
            var names = new List<string>();
            const string openingTag = "using ";
            const int namespaceStartIndex = 6;

            foreach (var file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);

                foreach (var sourceLine in sourceLines)
                {
                    var trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    if (trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";"))
                    {
                        var name = trimmedLine.Substring(namespaceStartIndex, trimmedLine.Length - namespaceStartIndex - 1);

                        if (!names.Contains(name))
                        {
                            names.Add(name);
                        }
                    }
                }
            }

            return names;
        }
    }
}